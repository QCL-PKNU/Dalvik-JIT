/*********************************************************************
*   DtcCSymbol.h:
*
*   Authors:
*      Youngsun Han (youngsun@kiu.ac.kr)
*      Minseong Kim (kim1144@naver.com)
*
*   Copyright (c) 2014
*
*   Compiler & Microarchitecture Laboratory (compiler.korea.ac.kr)
**********************************************************************/

#ifndef _DTC_C_SYMBOL_H_
#define _DTC_C_SYMBOL_H_

#include "DtcCommon.h"
#include "DtcDexLiveWeb.h"

typedef union {

	j_boolean z;	
	j_byte b;		
	j_char c;		
	j_short s;	
	j_int i;		
	j_long j;		
	j_float f;		
	j_double d;	
	j_object* o;	

} DtcCConstData_t;

///////////////////////////////////////////////////////////////////////
// User-defined Type Definition
///////////////////////////////////////////////////////////////////////

// C symbol types for DEX2C
typedef enum {

	DTC_C_SYM_UNKNOWN = 0, 
	DTC_C_SYM_VAR,
	DTC_C_SYM_LABEL,
	DTC_C_SYM_CONST,

	// The number of the C symbol types
	DTC_C_NUM_OF_SYM,
	
} DtcCSymbolType_t;

///////////////////////////////////////////////////////////////////////
// DtcCSymbol Class Declaration
///////////////////////////////////////////////////////////////////////

class DtcCSymbol {

protected :
	///////////////////////////////////////////////////////////////////
	// Member Variable Declaration
	///////////////////////////////////////////////////////////////////

	// Symbol type
	DtcCSymbolType_t m_nType;

public:
	///////////////////////////////////////////////////////////////////
	// Constructor & Destructor Declaration
	///////////////////////////////////////////////////////////////////	
	
	DtcCSymbol(DtcCSymbolType_t nType = DTC_C_SYM_UNKNOWN);
	
	virtual ~DtcCSymbol(void);

	///////////////////////////////////////////////////////////////////
	// Debugging Function Declaration
	///////////////////////////////////////////////////////////////////

	virtual void Write(ostream &pOut) = 0;
	
	friend ostream &operator << (ostream &pOut, DtcCSymbol *pSymbol);
};

///////////////////////////////////////////////////////////////////////
// DtcCVarSymbol Class Declaration
///////////////////////////////////////////////////////////////////////

class DtcCVarSymbol : public DtcCSymbol {

private :
	///////////////////////////////////////////////////////////////////
	// Member Variable Declaration
	///////////////////////////////////////////////////////////////////

	DtcDexLiveWeb *m_pWeb;

public:
	///////////////////////////////////////////////////////////////////
	// Constructor & Destructor Declaration
	///////////////////////////////////////////////////////////////////	
	
	DtcCVarSymbol(DtcDexLiveWeb *pWeb);
	
	virtual ~DtcCVarSymbol();

	/**
	 * This function will return the name of this variable symbol.
	 * 
	 * @return the name of the varable symbol
	 */
	inline const char *GetNameString() {
		strstream o;
		m_pWeb->Write(o);
		return o.str();
	}

	const char *GetTypeString();

	///////////////////////////////////////////////////////////////////
	// Debugging Function Declaration
	///////////////////////////////////////////////////////////////////

	virtual void Write(ostream &pOut);
};

///////////////////////////////////////////////////////////////////////
// DtcCFuncSymbol Class Declaration
///////////////////////////////////////////////////////////////////////

class DtcCFuncSymbol : public DtcCSymbol {

private :
	///////////////////////////////////////////////////////////////////
	// Member Variable Declaration
	///////////////////////////////////////////////////////////////////

	const char *m_pFuncName;

public:
	///////////////////////////////////////////////////////////////////
	// Constructor & Destructor Declaration
	///////////////////////////////////////////////////////////////////	
	
	DtcCFuncSymbol(const char *m_pFuncName);
	
	virtual ~DtcCFuncSymbol();

	///////////////////////////////////////////////////////////////////
	// Debugging Function Declaration
	///////////////////////////////////////////////////////////////////

	virtual void Write(ostream &pOut);
};


///////////////////////////////////////////////////////////////////////
// DtcCConstSymbol Class Declaration
///////////////////////////////////////////////////////////////////////

class DtcCConstSymbol : public DtcCSymbol {

private :
	///////////////////////////////////////////////////////////////////
	// Member Variable Declaration
	///////////////////////////////////////////////////////////////////

	DtcDexDataType_t m_nDataType;

	uint32_t m_nHigh32;
	uint32_t m_nLow32;

public:
	///////////////////////////////////////////////////////////////////
	// Constructor & Destructor Declaration
	///////////////////////////////////////////////////////////////////	
	
	DtcCConstSymbol(DtcDexDataType_t nType, uint32_t nHigh32, uint32_t nLow32);
	
	virtual ~DtcCConstSymbol();

	///////////////////////////////////////////////////////////////////
	// Debugging Function Declaration
	///////////////////////////////////////////////////////////////////

	virtual void Write(ostream &pOut);
};

///////////////////////////////////////////////////////////////////////
// DtcCLabelSymbol Class Declaration
///////////////////////////////////////////////////////////////////////

class DtcCLabelSymbol : public DtcCSymbol {

private :
	///////////////////////////////////////////////////////////////////
	// Member Variable Declaration
	///////////////////////////////////////////////////////////////////

	const char *m_pLabelString;

public:
	///////////////////////////////////////////////////////////////////
	// Constructor & Destructor Declaration
	///////////////////////////////////////////////////////////////////	

	DtcCLabelSymbol(uint32_t nLabelValue);
	
	DtcCLabelSymbol(const char *pLabelString);
	
	virtual ~DtcCLabelSymbol();

	///////////////////////////////////////////////////////////////////
	// Debugging Function Declaration
	///////////////////////////////////////////////////////////////////

	virtual void Write(ostream &pOut);
};

#endif
