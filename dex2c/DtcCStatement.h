/*********************************************************************
*   DtcCStatement.h:
*
*   Authors:
*      Youngsun Han (youngsun@kiu.ac.kr)
*      Minseong Kim (kim1144@naver.com)
*
*   Copyright (c) 2014
*
*   Compiler & Microarchitecture Laboratory (compiler.korea.ac.kr)
**********************************************************************/

#ifndef _DTC_C_STATEMENT_H_
#define _DTC_C_STATEMENT_H_

#include "DtcCommon.h"
#include "DtcCExpression.h"

class DtcCStatement;
class DtcCAssignStmt;
class DtcCBranchStmt;

///////////////////////////////////////////////////////////////////////
// User-defined Type Definition
///////////////////////////////////////////////////////////////////////

// C statement types for DEX2C
typedef enum {

	DTC_C_STMT_UNKNOWN = 0,
	DTC_C_STMT_ASSIGN,
	DTC_C_STMT_BRANCH,
	DTC_C_NUM_OF_STMT
	
} DtcCStmtType_t;

///////////////////////////////////////////////////////////////////////
// DtcCStatement Class Declaration
///////////////////////////////////////////////////////////////////////

class DtcCStatement {

protected:
	///////////////////////////////////////////////////////////////////
	// Member Variable Declaration
	///////////////////////////////////////////////////////////////////
	
	DtcCStmtType_t m_nType;

public:
	///////////////////////////////////////////////////////////////////
	// Constructor & Destructor Declaration
	///////////////////////////////////////////////////////////////////	
	
	DtcCStatement(DtcCStmtType_t nType = DTC_C_STMT_UNKNOWN);
	
	virtual ~DtcCStatement();

	///////////////////////////////////////////////////////////////////
	// Debugging Function Declaration
	///////////////////////////////////////////////////////////////////

	virtual void Write(ostream &pOut, uint32_t &nIndent) = 0;
	
	friend ostream &operator << (ostream &pOut, DtcCStatement *pStmt);
};

///////////////////////////////////////////////////////////////////////
// DtcCAssignStmt Class Declaration
///////////////////////////////////////////////////////////////////////

class DtcCAssignStmt : public DtcCStatement {

private:
	///////////////////////////////////////////////////////////////////
	// Member Variable Declaration
	///////////////////////////////////////////////////////////////////

	// Left-hand side expression 
	DtcCIdExpr *m_pIdExpr;

	// Right-hand side expression
	DtcCExpression *m_pRhsExpr;

public:
	///////////////////////////////////////////////////////////////////
	// Constructor & Destructor Declaration
	///////////////////////////////////////////////////////////////////	

	DtcCAssignStmt(DtcCIdExpr *pIdExpr, DtcCExpression *pRhsExpr);

	virtual ~DtcCAssignStmt();

	///////////////////////////////////////////////////////////////////
	// Debugging Function Declaration
	///////////////////////////////////////////////////////////////////

	virtual void Write(ostream &pOut, uint32_t &nIndent);
};

///////////////////////////////////////////////////////////////////////
// DtcCBranchStmt Class Declaration
///////////////////////////////////////////////////////////////////////

class DtcCBranchStmt : public DtcCStatement {

private:
	///////////////////////////////////////////////////////////////////
	// Member Variable Declaration
	///////////////////////////////////////////////////////////////////	
	
	// Condition expresison
	DtcCExpression *m_pCondExpr;

	// Target expression
	DtcCIdExpr *m_pTargetExpr;

public:
	///////////////////////////////////////////////////////////////////
	// Constructor & Destructor Declaration
	///////////////////////////////////////////////////////////////////
	
	DtcCBranchStmt(DtcCExpression *pCondExpr, DtcCIdExpr *pTargetExpr);
	
	virtual ~DtcCBranchStmt();

	///////////////////////////////////////////////////////////////////
	// Debugging Function Declaration
	///////////////////////////////////////////////////////////////////

	virtual void Write(ostream &pOut, uint32_t &nIndent);
};

#endif
